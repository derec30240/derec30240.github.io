[{"content":" Tags # ","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/tags/","section":"","summary":"\u003ch1 class=\"relative group\"\u003eTags \n    \u003cdiv id=\"tags\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#tags\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e","title":"","type":"tags"},{"content":"","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/tags/github/","section":"","summary":"","title":"Github","type":"tags"},{"content":"","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/tags/hugo/","section":"","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF/","section":"","summary":"","title":"技术","type":"tags"},{"content":"","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/tags/%E6%95%99%E7%A8%8B/","section":"","summary":"","title":"教程","type":"tags"},{"content":" 本文将详细介绍在 Windows 环境下，运用 Hugo 与 Blowfish 主题，于 Github Pages 上搭建个人博客，并借助 Github Actions 自动推送静态网站的方法。\n在搭建这个博客的过程中，我遭遇了各种各样的问题。然而，部分问题在官方文档和其他网络教程里都语焉不详，只能靠我自己慢慢摸索解决办法。现在，我把这些踩过的坑记录下来，一来是提醒自己，二来也希望能对后来者有所帮助。\n注意 这篇文章主要面向有一定计算机基础的人群。如果你还不了解什么是命令行、如何添加环境变量以及如何使用 Git 等相关内容，建议先系统性地学习这些知识，再按照本文的步骤进行操作。 准备工作 # 一个 Github 账号 安装并配置好 Git 一个文本编辑器（比如 VS Code、Notepad++等，记事本也行） 一个浏览器 （废话） 创建 Github 仓库 # 我们需要创建两个 Github 仓库。其中一个是私有仓库，用于存放网页的源代码；另一个是公共仓库，作为我们接下来要用到的 Github Pages 仓库，用于存放静态网页文件。\n首先创建一个新的私有仓库，稍后将会用它来存放 Hugo 生成的源代码。你可以为它取任何你喜欢的名字。例如，我将它命名为 BlogSource。\n然后创建一个公共仓库作为 Github Pages 的存放位置。需要注意的是，这个仓库的名称必须是 \u0026lt;username\u0026gt;.github.io，其中，\u0026lt;username\u0026gt; 是你的 Github 用户名。例如，我将它命名为 derec30240.github.io。\nderec30240/derec30240.github.io HTML 0 0 关于 Github Pages 的更多信息参见 Github Pages 官方文档。\n本地安装 # 安装 Hugo # 前往 Hugo 官方 Github 仓库，进入 Release 界面下载对应版本。我这里选择下载 hugo_0.148.1_windows-amd64.zip。\ngohugoio/hugo The world’s fastest framework for building websites. Go 82301 7944 将下载的文件解压后，放在合适的位置，例如 D:\\Hugo。\n将 hugo.exe 所在的文件夹路径 （不是 hugo.exe 的路径！！！） 添加到系统环境变量中。\n例如，如果 hugo.exe 的路径是 D:\\Hugo\\hugo.exe，那么将 D:\\Hugo 添加到系统环境变量中。\n在终端执行以下命令，验证安装是否成功：\nhugo version 如果安装成功，会显示 Hugo 的版本信息。否则会报错。\n\u0026gt; hugo version hugo v0.148.1-98ba786f2f5dca0866f47ab79f394370bcb77d2f windows/amd64 BuildDate=2025-07-11T12:56:21Z VendorInfo=gohugoio 创建本地站点 # 在终端执行以下命令，创建一个新的 Hugo 站点：\nhugo new site \u0026lt;mysite\u0026gt; 其中 \u0026lt;mysite\u0026gt; 是站点的名称，下文将以 BlogSource 为例进行说明。当然你也可以将其替换为自己喜欢的名称。\n这个命令将在当前位置创建一个名为 \u0026lt;mysite\u0026gt; 的文件夹，站点根目录即位于该文件夹内。\n进入站点根目录：\ncd BlogSource 到这一步，不出意外的话，你已经成功创建了一个站点。你可以直接跳转到这里继续下一步操作。当然，如果你已经迫不及待地想要尝试运行这个站点，也可以接着按下面的步骤操作。\n新建一篇文章：\nhugo new post/my-post.md 这个命令将在 /content/post 文件夹中生成 my-post.md 文件。你可以使用文本编辑器打开这个 .md 文件。\n打开之后，你会看到文件里已经生成了一些内容：\n+++ title = \u0026#39;My Post\u0026#39; date = 2025-07-17T15:09:01+08:00 draft = true +++ 这是文件头区域（Front Matter），在使用 hugo new 创建新的 .md 文件时，会根据 /archetypes 中的模板在文件开头自动生成。其中保存着文件的基本信息，例如 title 是标题，date 是日期，draft 是草稿状态等。\n若 draft 的值为 true ，启动服务后这篇文章是默认不可见的。如果要在预览中显示这些文章，需要给命令添加参数。详见下文。\n你可以在文件中随意编辑，之后点击保存。\n进行预览\n在站点根目录下，执行以下命令启动服务：\nhugo server # 显示草稿状态的文章 hugo server -D 此时在浏览器中访问 http://localhost:1313 即可看到你的站点。但是此时你会发现页面显示 404 Page Not Found。不用担心，这是正常的，因为我们还没有安装主题。\n先按 Ctrl + C 停止服务。接下来开始安装主题。\n安装 Blowfish 主题 # 在站点根目录依次执行以下命令：\ngit init -b main git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 这些命令将把你的站点目录初始化为一个新的 git 仓库，并把 Blowfish 作为其子模块导入。\n等待 Blowfish 下载完成后进行下一步操作。\n删除站点根目录中的 hugo.toml 文件。\n将 /themes/blowfish/archetypes 和 /themes/blowfish/config 两个文件夹分别复制到站点根目录的 /archetypes 和 /config 中，替换原有文件。\n进入 /config/_default 目录，将其中的 language.en.toml 和 menus.en.toml 两个文件名中的 en 替换为默认语言代码。例如，在中文环境下，将其分别重命名为 language.zh-cn.toml 和 menus.zh-cn.toml。\n打开同一目录下的 hugo.toml 文件，按照以下步骤修改：\n取消第 5 行的注释。 取消第6 行的注释，并将其中的域名替换为你的域名，也就是之前创建的 Github Pages 域名：https://\u0026lt;userename\u0026gt;.github.io，其中 \u0026lt;username\u0026gt; 是你的 Github 用户名。 将第 7 行的 en 替换为 zh-cn。 在第 8 行插入 hasCJKLanguage = true，以启用汉字计数。 以我的文件为例，修改后的 hugo.toml 开头应该是这样的：\n5 6 7 8 theme = \u0026#34;blowfish\u0026#34; baseURL = \u0026#34;https://derec30240.github.io/\u0026#34; defaultContentLanguage = \u0026#34;zh-cn\u0026#34; hasCJKLanguage = true 现在回到站点根目录，执行以下命令启动服务：\nhugo server 可以看到你的站点已经成功运行了。\n至此，Blowfish 的基本安装已经完成。接下来我们将进一步完善网站配置。\n配置与调试 # 配置站点 # 本节内容仅供参考。请根据 Blowfish 官方文档，结合自己的实际情况进行配置。 配置文件中每一项参数在官方文档中都有详细说明，如有疑问建议优先查阅。在此仅对一些关键步骤与容易出错的地方进行解释。\n建议一边运行 hugo server 预览，一边进行修改。\n进入 /config/_default 目录，打开 language.zh-cn.toml 文件进行修改。以下是我文件中的部分内容：\nlanguageCode = \u0026#34;zh-cn\u0026#34; languageName = \u0026#34;Simplified Chinese (China)\u0026#34; weight = 1 title = \u0026#34;Dr. Kee\u0026#39;s Blog\u0026#34; [params] displayName = \u0026#34;简体中文\u0026#34; isoCode = \u0026#34;cn\u0026#34; rtl = false dateFormat = \u0026#34;2006 年 1 月 2 日\u0026#34; logo = \u0026#34;img/logo.png\u0026#34; description = \u0026#34;Dr. Kee\u0026#39;s Blog\u0026#34; copyright = \u0026#34;© { year } by Dr. Kee. All Rights Reserved.\u0026#34; [params.author] name = \u0026#34;Dr. Kee\u0026#34; image = \u0026#34;img/profile.png\u0026#34; bio = \u0026#34;Talk less. Smile more.\u0026#34; links = [ { github = \u0026#34;https://github.com/derec30240\u0026#34; }, { bilibili = \u0026#34;https://space.bilibili.com/526473701\u0026#34; }, { steam = \u0026#34;https://steamcommunity.com/profiles/76561199075095514/\u0026#34; }, { email = \u0026#34;mailto:derec30240@163.com\u0026#34; }, ] params.logo：站点 logo 在 /assets 中的相对位置 params.author.image：作者头像在 /assets 中的相对位置，也可以是外部 URL 这里所说的这两个目录是站点根目录中的 /assets，而非 /themes/blowfish 中的 /assets。事实上，对网站进行的所有编辑均应在站点根目录中进行，一般不要编辑 /themes/blowfish 中的内容。这样可以避免文件结构混乱。\n经过测试，若 /assets 和 /themes/blowfish/assets 中存在同名文件，会优先调用 /assets 中的文件。另外，如果编辑了 /themes/blowfish 中的文件，在后续更新主题时可能会产生冲突。综上，推荐优先在站点根目录中进行编辑。\n打开 menus.zh-cn.toml 进行修改。以下是我文件中的部分内容：\n[[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;/posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;/tags\u0026#34; weight = 20 [[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;/about\u0026#34; weight = 30 这段配置将在网站头部菜单栏中创建三个项目：Posts、Tags 和 About，分别指向各自 pageRef 中的对应路径。这些项目会根据各自的 weight 进行排序，若 weight 相等则根据 name 的字母顺序排序。你可以根据自己的需求进行调整。\n打开 params.toml 进行修改。具体的可调节参数特别多，请参照 Blowfish 官方文档进行配置。你可以逐一尝试调节这些参数，看看会产生什么效果。\n另外，如果想要配置站点的 Favicon（即浏览器标签中网站标题旁边的小图标），应当把它们保存在 /static 目录中。它的结构看起来应当是这样的：\nstatic ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest 能够制作 Favicon 的网站有很多，我使用的是 favicon.io。\n创建文章页面 # 如果你在之前的步骤中已经创建过文章，推荐把他们全部删除后再创建新的文章，因为 Blowfish 的模板和 Hugo 的默认模板有一些区别。当然如果不嫌麻烦的话你也可以在之前的基础上进行修改。\n新建一篇文章：\nhugo new post/my-new-post.md 这个命令将在 /content/post 文件夹中生成 my-new-post.md 文件。\n打开 my-new-post.md 文件，可以看到文件里已经生成了一些内容：\n--- title : \u0026#39;My New Post\u0026#39; date : 2025-07-17T17:10:29+08:00 draft : true description : \u0026#34;\u0026#34; --- 你可以在文件中随意编辑，之后点击保存。\n与标准 Markdown 语法和 Hugo 默认简码略有不同的是，Blowfish 有一套额外的语法和简码规则。同时，Blowfish 还允许你对页面内容进行高度自定义。如果你对这些还不是很了解的话，推荐参考以下 Blowfish 官方内容：\nMarkdown 简码 文件头信息 缩略图 内容示例 在站点根目录下，输入 hugo server 启动服务。此时在浏览器中访问 http://localhost:1313，进入 Posts 页面，即可看到你的文章。\n如果文章没有显示出来，请确认其 draft 参数是否为 false，并确保 menus.zh-cn.toml 中的 pageRef 配置正确。\n如果想要预览草稿状态的文章，请使用 hugo server -D 命令。 上传站点 # 在站点根目录下，执行以下命令生成静态文件：\nhugo 这时你会发现，站点根目录下多了一个 /public 文件夹，生成的站点静态文件都存放在这个文件夹里。这也是我们接下来要使用 Github Actions 自动推送的目录。\n依次执行以下命令，将站点的所有源文件推送到你的私有仓库中：\ngit remote add origin \u0026lt;你的私有仓库地址\u0026gt; git pull --rebase origin main git add . git commit -m \u0026#39;\u0026lt;提交信息\u0026gt;\u0026#39; git push -u origin main 之后对站点做出修改并需要提交时，使用以下命令即可：\ngit add . git commit -m \u0026#39;\u0026lt;提交信息\u0026gt;\u0026#39; git push -u origin main 到这里，你的站点源文件应该被成功推送到之前创建好的私有仓库中了。接下来，我们将使用 Github Actions 实现自动推送并发布到 Github Pages。\n发布到 Github Pages # 在开始之前，我们再来梳理一遍使用 Hugo 生成站点的流程：\n安装 Hugo 安装主题 进行编辑 生成静态页面 将静态页面推送到 Github Pages 如果你理解了以上流程，那么接下来的操作应该非常好懂。我们使用 Github Actions 的目的，就是要将以上所有步骤自动化。之后，当你每次完成编辑并推送到私有仓库时，这些流程都会被自动执行。同样，我们也将按照这个思路来撰写 Workflows 文件。\n如果你还不知道什么是 Github Actions，推荐阅读这些内容：Github Actions 文档、5分钟快速入门 Github Actions 以子模块形式导入 /public # 如果你是按照前面的流程一步步进行到这里的，那么只需要将 /public 导入为子模块即可。打开站点根目录下的 .gitmodules 文件，在其中添加下面这一段：\n[submodule \u0026#34;public\u0026#34;] path = public url = \u0026lt;你的 Github Pages 仓库地址\u0026gt; 例如，我的 .gitmodules 文件如下：\n1 2 3 4 5 6 7 8 [submodule \u0026#34;themes/blowfish\u0026#34;] path = themes/blowfish url = https://github.com/nunocoracao/blowfish.git branch = main [submodule \u0026#34;public\u0026#34;] path = public url = https://github.com/derec30240/derec30240.github.io 如果你并非按照前面的流程操作到这里，或者你的站点根目录下没有 .gitmodules 文件，或者 .gitmodules 文件中的内容中不包含上面第一项，说明 Blowfish 主题没有被成功添加为子模块。请返回前文，执行这一节中的第一步。\n个人访问令牌（PAT） # 我们在最开始创建了两个仓库，并希望将私有仓库中的内容推送到公共仓库中。但是 Github Actions 自身只拥有自己所在仓库的操作权限。所以，为了实现跨仓库推送，我们需要为它添加一个允许跨仓库操作的令牌，即个人访问令牌（personal access token, PAT）。\n创建 PAT # 前往 Github 账号设置中的 Personal access token 界面。 点击「Generate new token」，选择「Generate new token (classic)」。 按如下方式设置 PAT： Notes 填一个自己喜欢的名称。 Expiration 选择 No expiration。 Select scopes 只需勾选 repo 和 workflow 即可。 点击页面最下方的「Generate token」按钮，会显示刚才创建的 PAT。点击右侧的按钮将它复制下来。PAT 只会显示这一次，请务必复制下来保存好，我们马上会用到它。 设置私有仓库的 Secret # 进入私有仓库界面，打开「Settings」-「Secrets and variables」-「Actions」，点击「New repository secret」。 Name 填一个自己喜欢的名称。将刚才复制的 PAT 粘贴到 Secret 或 Value 字段中。 撰写 Workflows 文件 # 在私有仓库的根目录中创建目录 /.github/workflows，这个文件夹将用来专门存储 Workflows 文件。\n在其中创建文件 \u0026lt;action\u0026gt;.yml。其中 \u0026lt;action\u0026gt; 可以使用自己喜欢的名称。此时文件结构应当是这样的：\n. └─ .github └─ workflows └─ \u0026lt;action\u0026gt;.yml 打开\u0026lt;action\u0026gt;.yml，开始撰写 workflow。如果你不会写，可以参考我的配置，也可以参考 Hugo 官方配置，或者让 AI 帮你写。当然都要根据你的实际情况进行修改。\n以我的配置为例，第30行的 \u0026lt;Name\u0026gt; 需要替换为你在创建 Secret 时设定的 Name；第32行的 \u0026lt;repo\u0026gt; 需要替换为你自己的 Github Pages 仓库地址。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name: Deploy Hugo site to Pages # Action 的名称 on: push: branches: - main # 在 main 分支发生 push 事件时触发 jobs: build: runs-on: ubuntu-latest # 使用最新版 Ubuntu 作为虚拟环境 steps: - name: Checkout repository uses: actions/checkout@v2 with: submodules: true # 使用子模块 - name: Setup Hugo # 在虚拟环境中安装 Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo site # 生成静态文件 run: hugo --minify - name: Deploy to GitHub Pages # 部署到 Github Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.\u0026lt;Name\u0026gt; }} # 拥有相应权限的 PAT publish_dir: ./public # 要推送的目录 external_repository: \u0026lt;repo\u0026gt; # 目标仓库地址 publish_branch: main # 推送到目标仓库的 main 分支 测试效果 # 完成以上所有步骤后，在私有仓库进行 push 操作，即可触发我们编辑好的 workflow。\n然后，进入你的 Github Pages 仓库界面，可以看到站点的静态文件已经被成功推送。在提交信息旁边的绿色小勾说明我们的 workflow 已经被成功执行。\n进入 Action 界面即可看到全部 workflow 的执行情况。橙色的圈表示正在执行，蓝色的勾表示成功，红色的叉表示失败（不过既然静态文件能够出现在 Github Pages 仓库，说明 workflow 肯定运行成功了）。我们可以在私有仓库的 Action 界面查看每次 push 后的执行情况。如果运行失败，Github 会通过邮件提醒你。\n点击即可查看详细执行过程和日志。\n🎉恭喜你成功搭建了属于自己的博客！\n提示 # 修复 Tags 页面显示问题 # 当你第一次为文章添加了 tags 属性后，进入到「Tags」页面，可能会发现刚才添加的 tags 都没有显示。\n如果遇到了这种问题，按照下面的步骤进行配置：\n确保 /config/_default/menus.zh-cn.toml 中相关的 pageRef 配置正确。 在 /content 目录下创建 /tags 文件夹。 在 /content/tags 目录下创建 _index.md 文件。 这时再打开「Tags」页面，可以看到 tags 都正常显示在这里了。你可以在这个 _index.md 文件中添加你想要在「Tags」页面显示的内容。\n这个方法也适用于首页、「Categories」、「About」等页面。对于首页，_index.md 可直接位于 /content 目录下。\n设置代码块行为 # 如果代码块不能复制，按照下面的流程进行配置：\n将 /config/_default/params.toml 中的 enableCodeCopy 设置为 true。 确保 /config/_default/markup.toml 中的 highlight.noClasses 设置为 false。 代码块必须声明使用的语言类型，或者声明为 plaintext 类型。 如果想让代码块显示行号，在语言类型声明后添加 {linenos=table} 即可。例如：\n1 2 3 4 5 6 ```yml {linenos=table} name: Deploy Hugo site to Pages on: push: branches: - main 更多操作详见 语法高亮 | Hugo 官方文档。\n然而，在默认情况下，如果开启 linenos=table，当代码行过长时无法左右滚动。一种可能的解决方法如下：\n在 /config/_default/hugo.toml 中添加如下内容：\n[markup] [markup.highlight] lineNos = true lineNumbersInTable = false # 强制使用非表格模式 使用 {linenos=true}。\n但是这会导致复制代码时连同行号一起复制。我目前还没有找到更好的解决方法，还请各位提点。\n添加自定义图标 # 如果想使用主题自带图标之外的图标（例如 Bilibili ），可以去寻找对应的 .svg 矢量图，然后对其重命名，使文件名只包含英文字母和数字，存放在 /assets/icons 目录下。需要使用时，直接通过不带 .svg 扩展名的文件名，在简码中引用即可。\n例如，要使用 Bilibili 的图标，在找到合适的文件后将其重命名为 bilibili.svg，使用 {{\u0026lt; icon \u0026quot;bilibili\u0026quot; \u0026gt;}} 即可。主页中的 links 也会自动匹配同名图标。\n如果使用后发现图标颜色显示异常，可以用文本编辑器打开对应的 .svg 文件，将 fill=\u0026quot;***\u0026quot; 修改为 fill=\u0026quot;currentColor\u0026quot;，或者将 \u0026lt;path d=\u0026quot;***\u0026quot;\u0026gt; 修改为 \u0026lt;path fill=\u0026quot;currentColor\u0026quot; d=\u0026quot;***\u0026quot;\u0026gt;。\n在这里推荐一个常用的 svg 图标网站：Simple Icons。但是由于版权原因，有些图标在这个网站中可能找不到 ，就要靠诸位各显神通了。\n参考 # Hugo 官方文档 Blowfish 官方文档 Github Pages 官方文档 Github Actions 官方文档 Nuno Coração - 使用 Blowfish和 Hugo 构建你的主页 褐瞳さん - 如何使用 Github Page 搭建自己的博客 Tomial - Hugo使用Github Action自动部署博客到Github Pages ","date":"2025 年 7 月 17 日","externalUrl":null,"permalink":"/posts/%E4%BD%BF%E7%94%A8hugo+github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文将详细介绍在 Windows 环境下，运用 Hugo 与 Blowfish 主题，于 Github Pages 上搭建个人博客，并借助 Github Actions 自动推送静态网站的方法。\u003c/p\u003e","title":"使用 Hugo + Github Pages 搭建个人博客","type":"posts"},{"content":" ","date":"2025 年 7 月 16 日","externalUrl":null,"permalink":"/","section":"首页","summary":"\u003ch2 id=\"typeit-6fb22d3943ec7794c447a8e7c1bb77a4\"\u003e\u003c/h2\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-6fb22d3943ec7794c447a8e7c1bb77a4\", {\n        strings: [\"\",\"世界平和なんで嘘だ　皆一人ぼっちだ\",\"\"],\n        speed:  100 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  true ,\n        waitUntilVisible:  true ,\n        loop:  false \n      }).go();\n    });\n\u003c/script\u003e","title":"首页","type":"page"},{"content":" 关于我 # 我是Dr. Kee，一名就读于西安的医学生，对编程和一些新鲜技术比较感兴趣。目前，我在空闲时间会做一些Python、Flutter和C#等方面的小项目。另一方面，我对于编写Minecraft的模组非常好奇，但苦于精力有限，未能充分涉足。\n简介 # 我目前正在使用Python、Flutter和C#进行各种项目。 我目前正在学习Minecraft的Forge端模组开发。 我希望能够在开源项目中有所贡献。 我喜欢玩游戏、听音乐和跑步，还喜欢探索新技术和讨论文学与哲学问题。 欢迎与我一起讨论任何与我的项目或者兴趣相关的问题。 联系方式 # 你可以通过以下方式与我联系：\nE-Mail：derec30240@163.com QQ：1433288172 关于本站 # 本站最初于2025年7月15日使用 Github Page 搭建。主要用于记录自己平时的一些技术笔记和经验分享，有时候也会上传一些自己的随笔和杂谈。如果文章有错误，或者有疑问、建议或不同见解，十分欢迎通过邮箱或者其他方式与我联系。\n技术实现 # 托管平台 # 网站本体托管在 Github Page 上。常规流程如下：\n在本地编辑进行编辑 将编辑好的内容到 Github 的一个 Private 仓库 通过 Github Action 自动生成静态网页并推送到 Public 仓库中 等待 Github Page 将生成的静态网页投放到公网 自定义字体 # 部分文字使用了 Maple Mono NF CN，我个人十分推荐这款字体。我的终端和绝大部分 IDE 用的都是这款字体，中英文宽度完美 2:1，图标也很全。\n网站状态 # 本站已托管 Github Page 运行：加载中\u0026mldr;\n里程碑 # 初次见面 2025-7-15 2025年7月15日，在 Github Page 上使用 Hugo + Blowfish 作为框架，搭建了这个网站。 ","date":"2025 年 7 月 15 日","externalUrl":null,"permalink":"/about/","section":"首页","summary":"\u003ch1 id=\"typeit-2bc053111729a74bce2ff033e7cdfe90\"\u003e\u003c/h1\u003e\n\n\u003cscript\u003e\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      new TypeIt(\"#typeit-2bc053111729a74bce2ff033e7cdfe90\", {\n        strings: [\"\",\"Hi there 🖖 我是Dr. Kee\",\"欢迎来到我的博客站\",\"\"],\n        speed:  100 ,\n        lifeLike:  true ,\n        startDelay:  0 ,\n        breakLines:  false ,\n        waitUntilVisible:  true ,\n        loop:  true \n      }).go();\n    });\n\u003c/script\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e关于我 \n    \u003cdiv id=\"关于我\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%85%b3%e4%ba%8e%e6%88%91\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我是Dr. Kee，一名就读于西安的医学生，对编程和一些新鲜技术比较感兴趣。目前，我在空闲时间会做一些Python、Flutter和C#等方面的小项目。另一方面，我对于编写Minecraft的模组非常好奇，但苦于精力有限，未能充分涉足。\u003c/p\u003e","title":"关于","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]